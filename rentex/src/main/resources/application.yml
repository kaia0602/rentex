server:
  port: ${SERVER_PORT:5000}
  forward-headers-strategy: framework   # ← 프록시/X-Forwarded-* 헤더 처리 활성화

spring:
  application:
    name: rentex

  config:
    import: optional:classpath:application-secret.properties,optional:file:./application-secret.properties

  datasource:
    url: ${SPRING_DATASOURCE_URL}
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
    driver-class-name: org.mariadb.jdbc.Driver

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        format_sql: false
        dialect: org.hibernate.dialect.MariaDBDialect
    defer-datasource-initialization: true

  sql:
    init:
      mode: always
      schema-locations: classpath:init/rentex.sql

  web:
    resources:
      static-locations:
        - classpath:/static/
        - file:${file.upload-dir}/

  servlet:
    multipart:
      max-file-size: 20MB
      max-request-size: 50MB

  # ==========================
  # OAuth2 (Google, Naver)
  # ==========================
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope: openid,email,profile
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope:
              - name
              - email
              - nickname
              - profile_image
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

  # ==========================
  # Mail (Gmail SMTP)
  # ==========================
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${SPRING_MAIL_USERNAME}
    password: ${SPRING_MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

# ===================================
# 업로드 경로 / 프론트 도메인
# ===================================
file:
  upload-dir: ${FILE_UPLOAD_DIR:./uploads}

app:
  frontend-url: ${APP_FRONTEND_URL:https://d3th25hinug8yx.cloudfront.net}

# ===================================
# JWT
# ===================================
jwt:
  secret: ${JWT_SECRET_KEY}
  expiration-in-seconds: ${JWT_EXPIRATION:3600}
  refresh-expiration-in-seconds: ${JWT_REFRESH_EXPIRATION:1209600}

logging:
  level:
    org.springframework.security: DEBUG    # ← Spring Security 전체 디버깅
    org.springframework.security.oauth2: DEBUG  # ← OAuth2 로그인 디버깅
    org.springframework.web: DEBUG         # ← 요청/리다이렉트 경로 확인
